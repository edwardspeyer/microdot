#!/usr/bin/env -S uv run --script
#
# Create and manage markdown notes.
#
# vim: ft=python
#
# /// script
# requires-python = ">=3.10"
# dependencies = [
#     "lxml",
#     "markdown",
#     "rich",
# ]
# ///

import re
import shlex
from argparse import ArgumentParser
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
from subprocess import check_output, run, PIPE
from typing import Iterator
from uuid import uuid4 as create_uuid
from textwrap import dedent

import lxml.html
from markdown import markdown
from rich import box
from rich.console import Console
from rich.table import Table

NEW_TEMPLATE = "~/Projects/Months/%Y-%m/Note.%Y-%m-%dT%H.%M.md"


def edit(path: str) -> None:
    run(["vim", path])


def create_new_note() -> None:
    t = datetime.now().replace(microsecond=0)
    s = t.strftime(NEW_TEMPLATE)
    p = Path(s).expanduser()
    if p.exists():
        p0 = p
        for i in range(100):
            n = i + 1
            p = p0.parent / f"{p0.stem}.{n:02d}{p0.suffix}"
            if not p.exists():
                break
        else:
            raise Exception("!!!")  # TODO
    uuid = create_uuid()
    template = dedent(
        f"""\
        # {t.date().isoformat()} New Note

        <!-- note created:{t.isoformat()} uuid:{uuid} -->
        """
    )
    p.parent.mkdir(exist_ok=True, parents=True)
    p.write_text(template)
    edit(str(p))

    if p.exists() and p.read_text() == template:
        # TODO log
        p.unlink()


@dataclass
class Note:
    path: Path
    source: str
    created: datetime | None
    html: str
    title: str | None


def get_notes() -> Iterator[Note]:
    HOME = Path.home().resolve()
    output = check_output(["fdfind", "--type", "file", ".md$", str(HOME)], text=True)
    paths = sorted(map(Path, output.splitlines()))

    for path in paths:
        source = path.read_text()
        md = re.search(r"<!-- +note +(.+)-->", source)
        if not md:
            continue
        meta = dict(pair.split(":", maxsplit=1) for pair in md.group(1).split())
        created = datetime.fromisoformat(v) if (v := meta.get("created")) else None
        html = markdown(source)
        doc = lxml.html.fromstring(html)
        title = headings[0].text if (headings := doc.xpath("//h1 | //h2 | //h3")) else "?"

        yield Note(path, source, created, html, title)


def get_notes_by_date() -> list[Note]:
    def by_date(n: Note) -> datetime:
        return n.created

    return sorted(get_notes(), key=by_date)


def list_notes() -> None:
    table = Table(box=box.ROUNDED)

    table.add_column("Created", style="cyan", no_wrap=True)
    table.add_column("Title", style="bold")
    table.add_column("Path")

    for note in get_notes_by_date():
        table.add_row(
            note.created.strftime("%Y-%m-%d"),
            note.title,
            str(note.path),
        )

    console = Console()
    console.print(table)


def print_rename_script() -> None:
    for note in get_notes_by_date():
        safe_title = re.sub(r"\W", "_", note.title)
        new_path = note.path.parent / f"{safe_title}.md"
        if new_path.exists():
            continue
        command = ["mv", note.path, new_path]
        script = shlex.join(map(str, command))
        print(script)


def fuzzy_find_and_edit() -> None:
    rows = [[n.created.isoformat(), n.title, str(n.path)] for n in reversed(get_notes_by_date())]
    columns = zip(*rows)
    widths = [max(map(len, c)) for c in columns]

    def pad(row: list[str]) -> str:
        return "\x1f  ".join(v.ljust(w) for v, w in zip(row, widths))

    header = pad(["Created", "Title", "Path"])
    body = "\n".join(pad(r) for r in rows)
    command = [
        "fzf",
        "--reverse",
        *("--header", header),
        *("--delimiter", "\x1f"),
        *("--accept-nth", "3"),  # the path
    ]
    p = run(command, text=True, input=body, stdout=PIPE)
    if p.returncode != 0:
        return  # TODO Log?
    if path := p.stdout.strip():
        edit(path)


def find_and_edit(search_term: str) -> None:
    matches = [n for n in get_notes_by_date() if re.search(search_term, repr(n), re.IGNORECASE)]
    if len(matches) == 0:
        print(f"no matches for {search_term=}!")
        return
    if len(matches) > 1:
        print(f">1 match!: {matches=}")
        return
    edit(str(matches[0].path))


def main() -> None:
    parser = ArgumentParser()

    parser.add_argument("-l", "--list", action="store_true")
    parser.add_argument("-r", "--rename", action="store_true")
    parser.add_argument("-e", "--edit", default=False, nargs="?")

    args = parser.parse_args()

    if args.list:
        list_notes()
    elif args.rename:
        print_rename_script()
    elif args.edit is None:
        fuzzy_find_and_edit()
    elif args.edit:
        find_and_edit(args.edit)
    else:
        create_new_note()


if __name__ == "__main__":
    main()
