#!/usr/bin/env -S uv run --script
#
# Create and manage markdown notes.
#
# vim: ft=python
#
# /// script
# requires-python = ">=3.10"
# dependencies = [
#     "lxml",
#     "markdown",
#     "rich",
# ]
# ///

import re
from argparse import ArgumentParser
from datetime import datetime
from pathlib import Path
from subprocess import check_output, run
from uuid import uuid4 as create_uuid

import lxml.html
from markdown import markdown
from rich import box
from rich.console import Console
from rich.table import Table

NEW_TEMPLATE = "~/Projects/Months/%Y-%m/Note.%Y-%m-%dT%H.%M.md"


def create_new_note() -> None:
    t = datetime.now().replace(microsecond=0)
    s = t.strftime(NEW_TEMPLATE)
    p = Path(s).expanduser()
    if p.exists():
        p0 = p
        for i in range(100):
            n = i + 1
            p = p0.parent / f"{p0.stem}.{n:02d}{p0.suffix}"
            if not p.exists():
                break
        else:
            raise Exception("!!!")  # TODO
    uuid = create_uuid()
    template = f"# New Note\n\n<!-- note created:{t.isoformat()} uuid:{uuid} -->\n"
    p.write_text(template)
    cmd = ["vim", str(p)]
    run(cmd)

    if p.exists() and p.read_text() == template:
        # TODO log
        p.unlink()


def list_notes() -> None:
    HOME = Path.home().resolve()
    output = check_output(["fdfind", "--type", "file", ".md$", str(HOME)], text=True)
    paths = sorted(output.splitlines())

    def rows():
        for path in paths:
            with open(path) as f:
                source = f.read()
            md = re.search(r"<!-- +note +(.+)-->", source)
            if not md:
                continue
            meta = dict(pair.split(":", maxsplit=1) for pair in md.group(1).split())
            created = meta.get("created", "?")
            html = markdown(source)
            doc = lxml.html.fromstring(html)
            title = headings[0].text if (headings := doc.xpath('//h1 | //h2 | //h3')) else "?"
            yield created, title, path

    table = Table(box=box.ROUNDED)

    table.add_column("Created", style="cyan", no_wrap=True)
    table.add_column("Title", style="bold")
    table.add_column("Path")

    for row in sorted(rows()):
        table.add_row(*row)

    console = Console()
    console.print(table)


def main() -> None:
    parser = ArgumentParser()

    parser.add_argument("-l", "--list", action="store_true")

    """
    TODO rename: suggest renaming for files based on the title?
    """

    args = parser.parse_args()
    if args.list:
        list_notes()
    else:
        create_new_note()


if __name__ == "__main__":
    main()
