"
" Selecting text: integration with other clipboards
"
" Different desktop environments have different clipboard facilities.  This
" basically boils down to X11 (2x) versus macOS (1x).  In X11:
"
"   Mouse selection  =  PRIMARY    =  *  =  unnamed
"   Copy-cut-paste   =  CLIPBOARD  =  +  =  unnamedplus
"
set clipboard=unnamed
"set clipboard=unnamedplus

" Allow modelines in the first "page"-ish of code
set modeline
set modelines=24

" Traditional colours
syntax on
set t_Co=8

" Prettier splits
set fillchars+=vert:\â”ƒ
highlight VertSplit ctermfg=Black ctermbg=Gray

" Indenting magic
set autoindent
filetype indent on

" bufexplorer
map <C-J> :bprevious<cr>
map <C-K> :bnext<cr>
map <C-N> :bdelete<CR>
map <F5> :make<CR>

" Allow multiple buffers to be open
set hidden

" Searching
set hlsearch
set incsearch

" Make tab-autocompletion more bash-like
set wildmode=list:longest

" Needed to get vim 8 packages (like vim-go) to run their filedetect code
filetype on
filetype plugin on
filetype indent on

"
" Swapfiles
"
" I don't really like them, and like CAPSLOCK, I only ever seem to encounter
" them whenever they have caused a problem and need turning off.  I used to
" keep them out the way in another directory but now I just turn them off
" altogether.
"
"set directory=$HOME/.vim/swapfiles
set noswapfile

" Expand tabs into spaces by default (except for Makefiles)
set expandtab
:autocmd Filetype make set noexpandtab

" Per-filetype settings
:autocmd Filetype markdown      set tabstop=4 shiftwidth=4 formatoptions=rtq autoindent comments=f:*\ 
:autocmd Filetype css           set tabstop=2 shiftwidth=2
:autocmd Filetype html,xml      set tabstop=2 shiftwidth=2
:autocmd Filetype yaml          set tabstop=2 shiftwidth=2
:autocmd Filetype ruby          set tabstop=2 shiftwidth=2
:autocmd Filetype sh            set tabstop=2 shiftwidth=2
:autocmd Filetype python        set tabstop=4 shiftwidth=4 makeprg=autopep8\ -i\ %
:autocmd Filetype javascript    set tabstop=2 shiftwidth=2


"" Settings taken from the Debian defaults
"set nocompatible                " Use Vim defaults instead of 100% vi
"                                " compatibility
"set backspace=indent,eol,start  " more powerful backspacing
"set autoindent                  " always set autoindenting on
"set textwidth=0                 " Don't wrap words by default
"set nobackup                    " Don't keep a backup file
"set viminfo='20,\"50            " read/write a .viminfo file, don't store more
"                                " than 50 lines of registers
"set history=50                  " keep 50 lines of command line history
"set ruler                       " show the cursor position all the time
"set showcmd                     " Show (partial) command in status line
"set showmatch                   " Show matching brackets
"set autowrite                   " Automatically save before commands like :next
"                                " and :make
"
"" Navigate the results of make-ing / grep-ing
""map <S-J> :cprevious<CR>
""map <S-K> :cnext<CR>
"
":au Filetype ruby set errorformat=\ \ \ \ %f:%l:%m,\	from\ %f:%l:%m,\	from\ %f:%l,%f:%l:%m
"
"" Turn on the mouse for console vim
""set mouse=a
"set mouse=n
"
"" Make * a bullet point, not a comment prefix.
"set comments-=mb:*
"set comments+=fb:*
"
"" OS X crontab editing
"au BufEnter /tmp/crontab.* setl backupcopy=yes


"
" Plugins
"
call plug#begin()
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'preservim/nerdtree'
Plug 'jlanzarotta/bufexplorer'
Plug 'jamessan/vim-gnupg'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
call plug#end()


"
" vim-lsp settings
"
if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'allowlist': ['python'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " (egs) turn off other-symbol highlighting
    let g:lsp_document_highlight_enabled = 0

    " (egs)
    set signcolumn=no
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

"
" Improve regular grepping if ripgrep is available
"
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
endif
